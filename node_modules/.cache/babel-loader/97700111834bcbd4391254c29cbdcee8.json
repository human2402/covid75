{"ast":null,"code":"import _objectSpread from\"/home/human2402/myFolder/covid75/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/home/human2402/myFolder/covid75/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/home/human2402/myFolder/covid75/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/human2402/myFolder/covid75/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/human2402/myFolder/covid75/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';var Global=function Global(prop){var _useState=useState(),_useState2=_slicedToArray(_useState,2),upadteDate=_useState2[0],setUpdateDate=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),totalInfected=_useState4[0],setTotalInfected=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),minCountry=_useState6[0],setMinCountry=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),maxCountry=_useState8[0],setMaxCountry=_useState8[1];//BACK END STUFF\nuseEffect(function(){return backEnd();},[]);useEffect(function(){consoling();checker();},[maxCountry]);var checker=function checker(){if(minCountry[0]===undefined){backEnd();}};var backEnd=function backEnd(){var requestOptions={method:'GET',redirect:'follow'};fetch('https://api.covid19api.com/summary',requestOptions).then(function(response){return response.json();}).then(function(result){resulting(result);}).catch(function(error){return console.error(error);});};var resulting=function resulting(data){var coolTime=formatTime(data.Date);setUpdateDate(coolTime);setTotalInfected(data.Global.TotalConfirmed);calcMore(data.Countries,'min');calcMore(data.Countries,'max');};var formatTime=function formatTime(time){var sliced=time.slice(0,10);var date=new Date(sliced);var day=date.getDate();if(day<10)day='0'+day;var month=date.getMonth()+1;if(month<10)month='0'+month;var result=\"\".concat(day,\".\").concat(month);return result;};var calcMore=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(countries,pos){var numArray,minNum,winIndex,winCountry,shorter,finalArray;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:numArray=[];countries.map(function(item,index){var num=item.TotalConfirmed;if(numArray.indexOf(num)===-1|index===0)numArray.push(num);});if(pos==='min')minNum=Math.min.apply(Math,numArray);if(pos==='max')minNum=Math.max.apply(Math,numArray);winIndex=numArray.indexOf(minNum);countries.map(function(item,index){if(index===winIndex)winCountry=item;});_context.next=8;return toShort(winCountry.CountryCode);case 8:shorter=_context.sent;finalArray=[shorter,winCountry.TotalConfirmed,winCountry.CountryCode];if(pos==='min')setMinCountry(finalArray);if(pos==='max')setMaxCountry(finalArray);case 12:case\"end\":return _context.stop();}}},_callee);}));return function calcMore(_x,_x2){return _ref.apply(this,arguments);};}();var toShort=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(code){var finalResult,url,token,query,options;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:finalResult=1;url=\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/country\";token=\"64338c022bb3d954343cf4b5375960258a5d2524\";query=code;options={method:\"POST\",mode:\"cors\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"Authorization\":\"Token \"+token},body:JSON.stringify({query:query})};_context2.next=7;return fetch(url,options).then(function(response){return response.json();}).then(function(result){finalResult=result.suggestions[0].data.name_short;//console.log (finalResult)\nreturn finalResult;}).catch(function(error){return console.log(\"error\",error);});case 7:return _context2.abrupt(\"return\",finalResult);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function toShort(_x3){return _ref2.apply(this,arguments);};}();var consoling=function consoling(){if(maxCountry!==undefined){console.log(\"Updated on \".concat(upadteDate));console.log(\"Total infected: \".concat(totalInfected));console.log(\"The less infected country is \".concat(minCountry[0],\" (\").concat(minCountry[2],\") with total \").concat(minCountry[1],\" confirmed cases\"));console.log(\"The most infeceted country is \".concat(maxCountry[0],\" (\").concat(maxCountry[2],\") with total \").concat(maxCountry[1],\" confirmed cases\"));}};//VARS\nvar mainTrans='-110';if(prop.isOpen)mainTrans='0';//STYLES\nvar upperPS={margin:'3vh 0 0 0',fontSize:'3vh',fontWeight:'400'};var imgContainerS={width:'20%',margin:'0 0 0 5%',display:'grid',placeItems:'center'};var imgS={width:'100%'};var infoContainerS={margin:'0 5%',width:'70%'};var countryNamePS=_defineProperty({fontSize:'3.2vh',fontWeight:'400',margin:'1vh 0 0 0',lineHeight:'1.2'},\"fontWeight\",'300');var numPS={fontSize:'3.5vh',margin:'0.7vh 0 2vh 0',lineHeight:1};var chS={fontWeight:'300'};return/*#__PURE__*/React.createElement(\"div\",{style:{width:'77%',margin:'0 auto',transform:\"translateY(\".concat(mainTrans,\"%)\"),transition:'transform 0.4s ease'}},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{style:_objectSpread({},upperPS,{margin:'0'})},\"\\u0412\\u0441\\u0435\\u0433\\u043E \\u0437\\u0430\\u0440\\u0430\\u0436\\u0435\\u043D\\u043E:\"),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'flex-end'}},/*#__PURE__*/React.createElement(\"p\",{style:{margin:'1vh 0 0 0',fontSize:'3.4vh',backgroundColor:'#b7b7b7',padding:'0 5%',borderRadius:'10px'}},totalInfected,\" \\u0447.\"))),/*#__PURE__*/React.createElement(\"div\",{style:{color:'#ffffff'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2.5vh',borderRadius:'20px 20px 0 0',width:'100%',backgroundColor:'#a73b3b',display:'flex'}},/*#__PURE__*/React.createElement(\"div\",{style:imgContainerS},/*#__PURE__*/React.createElement(\"img\",{style:imgS,src:\"https://www.countryflags.io/\".concat(maxCountry[2],\"/shiny/64.png\")})),/*#__PURE__*/React.createElement(\"div\",{style:infoContainerS},/*#__PURE__*/React.createElement(\"p\",{style:countryNamePS},maxCountry[0]),/*#__PURE__*/React.createElement(\"p\",{style:numPS},maxCountry[1],\" \",/*#__PURE__*/React.createElement(\"span\",{style:chS},\"\\u0447.\")))),/*#__PURE__*/React.createElement(\"div\",{style:{borderRadius:'0 0 20px 20px',width:'100%',backgroundColor:'#519c37',display:'flex'}},/*#__PURE__*/React.createElement(\"div\",{style:imgContainerS},/*#__PURE__*/React.createElement(\"img\",{style:imgS,src:\"https://www.countryflags.io/\".concat(minCountry[2],\"/shiny/64.png\")})),/*#__PURE__*/React.createElement(\"div\",{style:infoContainerS},/*#__PURE__*/React.createElement(\"p\",{style:countryNamePS},minCountry[0]),/*#__PURE__*/React.createElement(\"p\",{style:numPS},minCountry[1],\" \",/*#__PURE__*/React.createElement(\"span\",{style:chS},\"\\u0447.\")))),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'flex-end'}},/*#__PURE__*/React.createElement(\"p\",{style:{fontSize:'2vh',color:'#000',margin:'0.5vh 5% 0.7vh 0'}},/*#__PURE__*/React.createElement(\"span\",{style:chS},\" \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043E\"),\" \",upadteDate))));};export default Global;","map":{"version":3,"sources":["/home/human2402/myFolder/covid75/src/com/middleStuff/tabs/tab2com/Global.js"],"names":["React","useState","useEffect","Global","prop","upadteDate","setUpdateDate","totalInfected","setTotalInfected","minCountry","setMinCountry","maxCountry","setMaxCountry","backEnd","consoling","checker","undefined","requestOptions","method","redirect","fetch","then","response","json","result","resulting","catch","error","console","data","coolTime","formatTime","Date","TotalConfirmed","calcMore","Countries","time","sliced","slice","date","day","getDate","month","getMonth","countries","pos","numArray","map","item","index","num","indexOf","push","minNum","Math","min","max","winIndex","winCountry","toShort","CountryCode","shorter","finalArray","code","finalResult","url","token","query","options","mode","headers","body","JSON","stringify","suggestions","name_short","log","mainTrans","isOpen","upperPS","margin","fontSize","fontWeight","imgContainerS","width","display","placeItems","imgS","infoContainerS","countryNamePS","lineHeight","numPS","chS","transform","transition","justifyContent","backgroundColor","padding","borderRadius","color","marginTop"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect} from 'react'\n\nconst Global = (prop) => {\t\n\n\tconst [upadteDate, setUpdateDate] = useState ()\n\tconst [totalInfected, setTotalInfected] = useState ()\n\tconst [minCountry, setMinCountry] = useState ([])\n\tconst [maxCountry, setMaxCountry] = useState ([])\n\n\t//BACK END STUFF\n\tuseEffect (() => backEnd(), [])\n\n\tuseEffect (() => {\n\t\tconsoling()\n\t\tchecker()\n\t}, [maxCountry])\n\n\tconst checker = () => {\n\t\tif (minCountry[0] === undefined) {\n\t\t\tbackEnd ()\n\t\t}\n\t}\n\n\tconst backEnd = () => {\n\t\tconst requestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\tredirect: 'follow'\n\t\t}\n\t\tfetch('https://api.covid19api.com/summary', requestOptions)\n\t\t\t.then (response => response.json())\n\t\t\t.then (result => {\n\t\t\t\tresulting (result)\n\t\t\t})\n\t\t\t.catch(error => console.error (error))\n\t}\n\n\tconst resulting = (data) => {\n\t\tlet coolTime = formatTime (data.Date)\n\t\tsetUpdateDate (coolTime)\n\t\tsetTotalInfected (data.Global.TotalConfirmed)\n\t\tcalcMore (data.Countries, 'min')\n\t\tcalcMore (data.Countries, 'max')\n\t}\n\n\tconst formatTime = (time) => {\n\t\tlet sliced = time.slice(0, 10)\n\t\tlet date = new Date (sliced)\n\t\tlet day =  date.getDate ()\n            if (day < 10) day = '0' + day\n        let month = date.getMonth () + 1\n            if (month < 10) month = '0' + month\n        let result = `${day}.${month}`\n\n\t\treturn result\n\t}\n\n\tconst calcMore = async (countries, pos) => {\n\t\tlet numArray = []\n\t\tcountries.map ((item, index) => {\n\t\t\tlet num = item.TotalConfirmed\n\t\t\tif (numArray.indexOf(num) === -1 | index === 0) numArray.push (num)\n\t\t} )\n\t\tlet minNum\n\t\tif (pos === 'min') minNum = Math.min (...numArray)\n\t\tif (pos === 'max') minNum =\tMath.max (...numArray)\n\t\tlet winIndex = numArray.indexOf (minNum)\n\t\tlet winCountry\n\t\tcountries.map ((item, index) => {\n\t\t\tif (index === winIndex) winCountry = item\n\t\t})\n\n\n\t\tlet shorter = await toShort(winCountry.CountryCode)\n\n\t\tconst finalArray = [shorter, winCountry.TotalConfirmed ,winCountry.CountryCode]\n\n\t\tif (pos === 'min') setMinCountry (finalArray)\n\t\tif (pos === 'max') setMaxCountry (finalArray)\n\n\t}\n\n\tconst toShort = async (code) => {\n\t\tlet finalResult = 1\n\t\tvar url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/country\";\n\t\tvar token = \"64338c022bb3d954343cf4b5375960258a5d2524\";\n\t\tvar query = code;\n\n\t\tvar options = {\n\t\t    method: \"POST\",\n\t\t    mode: \"cors\",\n\t\t    headers: {\n\t\t        \"Content-Type\": \"application/json\",\n\t\t        \"Accept\": \"application/json\",\n\t\t        \"Authorization\": \"Token \" + token\n\t\t    },\n\t\t    body: JSON.stringify({query: query})\n\t\t}\n\n\t\tawait fetch(url, options)\n\t\t.then(response => response.json())\n\t\t.then(result => {\n\t\t\tfinalResult = result.suggestions[0].data.name_short\n\t\t\t//console.log (finalResult)\n\t\t\treturn finalResult\n\t\t})\n\t\t.catch(error => console.log(\"error\", error))\n\n\t\treturn finalResult\n\t}\n\n\tconst consoling = () => {\n\t\tif (maxCountry !== undefined) {\n\t\t\tconsole.log (`Updated on ${upadteDate}`)\n\t\t\tconsole.log (`Total infected: ${totalInfected}`)\n\t\t\tconsole.log (`The less infected country is ${minCountry[0]} (${minCountry[2]}) with total ${minCountry[1]} confirmed cases`)\n\t\t\tconsole.log (`The most infeceted country is ${maxCountry[0]} (${maxCountry[2]}) with total ${maxCountry[1]} confirmed cases`)\n\t\t}\n\t}\n\n\t//VARS\n\tlet mainTrans = '-110'\n\tif (prop.isOpen) mainTrans = '0'\n\n\t//STYLES\n\tconst upperPS = {\n\t\tmargin: '3vh 0 0 0', fontSize: '3vh', fontWeight: '400'\n\t}\n\t\n\tconst imgContainerS = {\n\t\twidth: '20%',\n\t\tmargin: '0 0 0 5%',\n\t\tdisplay: 'grid',\n\t\tplaceItems: 'center'\n\t}\n\tconst imgS = {\n\t\twidth: '100%'\n\t}\n\tconst infoContainerS = {\n\t\tmargin: '0 5%', width: '70%'\n\t}\n\tconst countryNamePS = {\n\t\tfontSize: '3.2vh', fontWeight: '400', margin: '1vh 0 0 0', lineHeight: '1.2', fontWeight: '300'\n\t}\n\tconst numPS = {\n\t\tfontSize: '3.5vh', margin: '0.7vh 0 2vh 0', lineHeight: 1\n\t}\n\tconst chS = {\n\t\tfontWeight: '300'\n\t}\n\n\treturn (\n\t\t<div style = {{width: '77%', margin: '0 auto' ,transform: `translateY(${mainTrans}%)`, transition: 'transform 0.4s ease'}}>\n\t\t\t<div>\n\t\t\t\t<p style = {{...upperPS, margin: '0'}}>\n\t\t\t\t\tВсего заражено:\n\t\t\t\t</p>\n\t\t\t\t<div style = {{display: 'flex', justifyContent: 'flex-end'}}>\n\t\t\t\t\t<p style = {{margin: '1vh 0 0 0', fontSize: '3.4vh', backgroundColor: '#b7b7b7', padding: '0 5%', borderRadius: '10px'}}> \n\t\t\t\t\t\t{totalInfected} ч.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div style = {{color: '#ffffff'}}>\n\t\t\t\t<div style = {{marginTop: '2.5vh' ,borderRadius: '20px 20px 0 0' ,width: '100%', backgroundColor: '#a73b3b', display: 'flex'}}>\n\t\t\t\t\t<div style = {imgContainerS}>\n\t\t\t\t\t\t<img style = {imgS} src = {`https://www.countryflags.io/${maxCountry[2]}/shiny/64.png`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style = {infoContainerS}>  \n\t\t\t\t\t\t<p style = {countryNamePS}>\n\t\t\t\t\t\t\t{maxCountry[0]}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p style = {numPS}> \n\t\t\t\t\t\t\t{maxCountry[1]} <span style = {chS}>ч.</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style = {{borderRadius: '0 0 20px 20px' ,width: '100%', backgroundColor: '#519c37', display: 'flex'}}>\n\t\t\t\t\t<div style = {imgContainerS}>\n\t\t\t\t\t\t<img style = {imgS} src = {`https://www.countryflags.io/${minCountry[2]}/shiny/64.png`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style = {infoContainerS}>  \n\t\t\t\t\t\t<p style = {countryNamePS}>\n\t\t\t\t\t\t\t{minCountry[0]}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p style = {numPS}> \n\t\t\t\t\t\t\t{minCountry[1]} <span style = {chS}>ч.</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style = {{display: 'flex', justifyContent: 'flex-end'}}>\n\t\t\t\t\t<p style = {{fontSize: '2vh', color: '#000', margin: '0.5vh 5% 0.7vh 0'}}> \n\t\t\t\t\t\t<span style = {chS}> Обновлено</span> {upadteDate}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Global"]},"metadata":{},"sourceType":"module"}