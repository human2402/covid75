{"ast":null,"code":"var _jsxFileName = \"/home/human2402/myFolder/covid75/src/com/middleStuff/tabs/tab2com/Global.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst Global = prop => {\n  const [upadteDate, setUpdateDate] = useState();\n  const [totalInfected, setTotalInfected] = useState();\n  const [minCountry, setMinCountry] = useState([]);\n  const [maxCountry, setMaxCountry] = useState([]); //BACK END STUFF\n\n  useEffect(() => backEnd(), []);\n  useEffect(() => consoling(), [maxCountry]);\n\n  const backEnd = () => {\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    fetch('https://api.covid19api.com/summary', requestOptions).then(response => response.json()).then(result => {\n      resulting(result);\n    }).catch(error => console.error(error));\n  };\n\n  const resulting = data => {\n    setUpdateDate(data.Date);\n    setTotalInfected(data.Global.TotalConfirmed);\n    calcMore(data.Countries, 'min');\n    calcMore(data.Countries, 'max');\n  };\n\n  let supaShort = null;\n\n  const calcMore = (countries, pos) => {\n    let numArray = [];\n    countries.map((item, index) => {\n      let num = item.TotalConfirmed;\n      if (numArray.indexOf(num) === -1 | index === 0) numArray.push(num);\n    });\n    let minNum;\n    if (pos === 'min') minNum = Math.min(...numArray);\n    if (pos === 'max') minNum = Math.max(...numArray);\n    let winIndex = numArray.indexOf(minNum);\n    let winCountry;\n    countries.map((item, index) => {\n      if (index === winIndex) winCountry = item;\n    });\n    toShort(winCountry.CountryCode);\n    console.log(supaShort);\n    const finalArray = [];\n    if (pos === 'min') setMinCountry(winCountry);\n    if (pos === 'max') setMaxCountry(winCountry);\n  };\n\n  const toShort = code => {\n    let finalResult;\n    var url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/country\";\n    var token = \"64338c022bb3d954343cf4b5375960258a5d2524\";\n    var query = code;\n    var options = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Token \" + token\n      },\n      body: JSON.stringify({\n        query: query\n      })\n    };\n    fetch(url, options).then(response => response.json()).then(result => {\n      supaShort = result.suggestions.Object;\n      console.log(result);\n    }).catch(error => console.log(\"error\", error));\n    return finalResult;\n  };\n\n  const consoling = () => {\n    if (maxCountry !== undefined) {\n      console.log(`Updated at ${upadteDate}`);\n      console.log(`Total infected: ${totalInfected}`);\n      console.log(`The less infected country is ${minCountry.Country} with total ${minCountry.TotalConfirmed} confirmed cases`);\n      console.log(`The most infeceted country is ${maxCountry.Country} with total ${maxCountry.TotalConfirmed} confirmed cases`);\n    }\n  }; //VARS\n\n\n  let mainTrans = '-100';\n  if (prop.isOpen) mainTrans = '0';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      transform: `translateY(${mainTrans}%)`,\n      transition: 'transform 0.4s ease',\n      height: '30vh',\n      width: '100%',\n      backgroundColor: 'purple'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default Global;","map":{"version":3,"sources":["/home/human2402/myFolder/covid75/src/com/middleStuff/tabs/tab2com/Global.js"],"names":["React","useState","useEffect","Global","prop","upadteDate","setUpdateDate","totalInfected","setTotalInfected","minCountry","setMinCountry","maxCountry","setMaxCountry","backEnd","consoling","requestOptions","method","redirect","fetch","then","response","json","result","resulting","catch","error","console","data","Date","TotalConfirmed","calcMore","Countries","supaShort","countries","pos","numArray","map","item","index","num","indexOf","push","minNum","Math","min","max","winIndex","winCountry","toShort","CountryCode","log","finalArray","code","finalResult","url","token","query","options","mode","headers","body","JSON","stringify","suggestions","Object","undefined","Country","mainTrans","isOpen","transform","transition","height","width","backgroundColor"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect} from 'react'\n\nconst Global = (prop) => {\t\n\n\tconst [upadteDate, setUpdateDate] = useState ()\n\tconst [totalInfected, setTotalInfected] = useState ()\n\tconst [minCountry, setMinCountry] = useState ([])\n\tconst [maxCountry, setMaxCountry] = useState ([])\n\n\t//BACK END STUFF\n\tuseEffect (() => backEnd(), [])\n\n\tuseEffect (() => consoling(), [maxCountry])\n\n\tconst backEnd = () => {\n\t\tconst requestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\tredirect: 'follow'\n\t\t}\n\t\tfetch('https://api.covid19api.com/summary', requestOptions)\n\t\t\t.then (response => response.json())\n\t\t\t.then (result => {\n\t\t\t\tresulting (result)\n\t\t\t})\n\t\t\t.catch(error => console.error (error))\n\t}\n\n\tconst resulting = (data) => {\n\t\tsetUpdateDate (data.Date)\n\t\tsetTotalInfected (data.Global.TotalConfirmed)\n\t\tcalcMore (data.Countries, 'min')\n\t\tcalcMore (data.Countries, 'max')\n\t}\n\n\tlet supaShort = null\n\n\tconst calcMore = (countries, pos) => {\n\t\tlet numArray = []\n\t\tcountries.map ((item, index) => {\n\t\t\tlet num = item.TotalConfirmed\n\t\t\tif (numArray.indexOf(num) === -1 | index === 0) numArray.push (num)\n\t\t} )\n\t\tlet minNum\n\t\tif (pos === 'min') minNum = Math.min (...numArray)\n\t\tif (pos === 'max') minNum =\tMath.max (...numArray)\n\t\tlet winIndex = numArray.indexOf (minNum)\n\t\tlet winCountry\n\t\tcountries.map ((item, index) => {\n\t\t\tif (index === winIndex) winCountry = item\n\t\t})\n\n\t\ttoShort(winCountry.CountryCode)\n\n\t\tconsole.log (supaShort)\n\n\t\tconst finalArray = []\n\n\t\tif (pos === 'min') setMinCountry (winCountry)\n\t\tif (pos === 'max') setMaxCountry (winCountry)\n\n\t}\n\n\tconst toShort = (code) => {\n\t\tlet finalResult\n\t\tvar url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/country\";\n\t\tvar token = \"64338c022bb3d954343cf4b5375960258a5d2524\";\n\t\tvar query = code;\n\n\t\tvar options = {\n\t\t    method: \"POST\",\n\t\t    mode: \"cors\",\n\t\t    headers: {\n\t\t        \"Content-Type\": \"application/json\",\n\t\t        \"Accept\": \"application/json\",\n\t\t        \"Authorization\": \"Token \" + token\n\t\t    },\n\t\t    body: JSON.stringify({query: query})\n\t\t}\n\n\t\tfetch(url, options)\n\t\t.then(response => response.json())\n\t\t.then(result => {\n\t\t\tsupaShort = result.suggestions.Object\n\t\t\tconsole.log (result)\n\t\t})\n\t\t.catch(error => console.log(\"error\", error));\n\n\t\treturn finalResult\n\t}\n\n\tconst consoling = () => {\n\t\tif (maxCountry !== undefined) {\n\t\t\tconsole.log (`Updated at ${upadteDate}`)\n\t\t\tconsole.log (`Total infected: ${totalInfected}`)\n\t\t\tconsole.log (`The less infected country is ${minCountry.Country} with total ${minCountry.TotalConfirmed} confirmed cases`)\n\t\t\tconsole.log (`The most infeceted country is ${maxCountry.Country} with total ${maxCountry.TotalConfirmed} confirmed cases`)\n\t\t}\n\t}\n\n\t//VARS\n\tlet mainTrans = '-100'\n\tif (prop.isOpen) mainTrans = '0'\n\n\treturn (\n\t\t<div style = {{ transform: `translateY(${mainTrans}%)`, transition: 'transform 0.4s ease',\n\t\t\theight:'30vh', width: '100%', backgroundColor:'purple'}}>\n\n\t\t</div>\n\t)\n}\n\nexport default Global"]},"metadata":{},"sourceType":"module"}