{"ast":null,"code":"var _jsxFileName = \"/home/human2402/myFolder/covid75/src/com/middleStuff/tabs/tab2com/Global.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst Global = prop => {\n  const [totalInfected, setTotalInfected] = useState();\n  const [minCountry, setMinCountry] = useState([]);\n  const [maxCountry, setMaxCountry] = useState([]); //BACK END STUFF\n\n  useEffect(() => backEnd(), []);\n\n  const backEnd = () => {\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    fetch('https://api.covid19api.com/summary', requestOptions).then(response => response.json()).then(result => {\n      resulting(result);\n    }).catch(error => console.error(error));\n  };\n\n  const resulting = data => {\n    console.log(data);\n    setTotalInfected(data.Global.TotalConfirmed);\n    calcMore(data.Countries, 'min');\n    calcMore(data.Countries, 'max');\n  };\n\n  const calcMore = (countries, pos) => {\n    let numArray = [];\n    countries.map((item, index) => {\n      let num = item.TotalConfirmed;\n      if (numArray.indexOf(num) === -1 | index === 0) numArray.push(num);\n    });\n    let minNum;\n    if (pos === 'min') minNum = Math.min(...numArray);\n    if (pos === 'max') minNum = Math.max(...numArray);\n    let winIndex = numArray.indexOf(minNum);\n    let winCountry;\n    countries.map((item, index) => {\n      if (index === winIndex) winCountry = item;\n    });\n    if (pos === 'min') setMinCountry(winCountry);\n    if (pos === 'max') setMaxCountry(winCountry);\n  }; //VARS\n\n\n  let mainTrans = '-100';\n  if (prop.isOpen) mainTrans = '0';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      transform: `translateY(${mainTrans}%)`,\n      transition: 'transform 0.4s ease',\n      height: '30vh',\n      width: '100%',\n      backgroundColor: 'purple'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default Global;","map":{"version":3,"sources":["/home/human2402/myFolder/covid75/src/com/middleStuff/tabs/tab2com/Global.js"],"names":["React","useState","useEffect","Global","prop","totalInfected","setTotalInfected","minCountry","setMinCountry","maxCountry","setMaxCountry","backEnd","requestOptions","method","redirect","fetch","then","response","json","result","resulting","catch","error","console","data","log","TotalConfirmed","calcMore","Countries","countries","pos","numArray","map","item","index","num","indexOf","push","minNum","Math","min","max","winIndex","winCountry","mainTrans","isOpen","transform","transition","height","width","backgroundColor"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect} from 'react'\n\nconst Global = (prop) => {\t\n\n\tconst [totalInfected, setTotalInfected] = useState ()\n\tconst [minCountry, setMinCountry] = useState ([])\n\tconst [maxCountry, setMaxCountry] = useState ([])\n\n\t//BACK END STUFF\n\tuseEffect (() => backEnd(), [])\n\n\tconst backEnd = () => {\n\t\tconst requestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\tredirect: 'follow'\n\t\t}\n\t\tfetch('https://api.covid19api.com/summary', requestOptions)\n\t\t\t.then (response => response.json())\n\t\t\t.then (result => {\n\t\t\t\tresulting (result)\n\t\t\t})\n\t\t\t.catch(error => console.error (error))\n\t}\n\n\tconst resulting = (data) => {\n\t\tconsole.log (data)\n\t\tsetTotalInfected (data.Global.TotalConfirmed)\n\t\tcalcMore (data.Countries, 'min')\n\t\tcalcMore (data.Countries, 'max')\n\t}\n\n\tconst calcMore = (countries, pos) => {\n\t\tlet numArray = []\n\t\tcountries.map ((item, index) => {\n\t\t\tlet num = item.TotalConfirmed\n\t\t\tif (numArray.indexOf(num) === -1 | index === 0) numArray.push (num)\n\t\t} )\n\t\tlet minNum\n\t\tif (pos === 'min') minNum = Math.min (...numArray)\n\t\tif (pos === 'max') minNum =\tMath.max (...numArray)\n\t\tlet winIndex = numArray.indexOf (minNum)\n\t\tlet winCountry\n\t\tcountries.map ((item, index) => {\n\t\t\tif (index === winIndex) winCountry = item\n\t\t})\n\n\t\tif (pos === 'min') setMinCountry (winCountry)\n\t\tif (pos === 'max') setMaxCountry (winCountry)\n\t}\n\n\t//VARS\n\tlet mainTrans = '-100'\n\tif (prop.isOpen) mainTrans = '0'\n\n\treturn (\n\t\t<div style = {{ transform: `translateY(${mainTrans}%)`, transition: 'transform 0.4s ease',\n\t\t\theight:'30vh', width: '100%', backgroundColor:'purple'}}>\n\n\t\t</div>\n\t)\n}\n\nexport default Global"]},"metadata":{},"sourceType":"module"}